{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { ElectionService } from '../../../../Services/election.service';\nimport { UserService } from '../../../services/user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../Services/election.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../services/user.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\n\nfunction VoteScreenComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const e_r3 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", e_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(e_r3.election.nameOfTheElection);\n  }\n}\n\nfunction VoteScreenComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const o_r4 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", o_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(o_r4.candidateOrPartyName);\n  }\n}\n\nexport let VoteScreenComponent = /*#__PURE__*/(() => {\n  class VoteScreenComponent {\n    constructor(service, route, router, userService) {\n      this.service = service;\n      this.route = route;\n      this.router = router;\n      this.userService = userService;\n      this.vote = {\n        AlreadyVoted: true,\n        OptionToVoteIdNumber: 0\n      };\n      this.userId = userService.userId; //  route.params.subscribe(u => { this.userId = +u['id'];})\n    }\n\n    ngOnInit() {//  this.service.getElections(this.userId).subscribe((e: any) => { this.elections = e })\n    }\n\n    filterOpenElections() {\n      return this.elections.filter(e => e.election.isOpen == true && e.alreadyVoted == false || e.election.isOpen == true && e.election.ischangeable);\n    }\n\n    getOptionsToVote() {\n      var currentvoter = this.filterOpenElections().find(v => v.id == this.voterId);\n      this.service.getOptionsToVote(currentvoter.election.id).subscribe(o => {\n        this.optionsToVote = o;\n      });\n    }\n\n    submit() {\n      this.service.updateVote(this.voterId, this.vote).subscribe(x => {\n        this.router.navigate(['/user/' + this.userId + '/userarea']);\n      });\n    }\n\n  }\n\n  VoteScreenComponent.ɵfac = function VoteScreenComponent_Factory(t) {\n    return new (t || VoteScreenComponent)(i0.ɵɵdirectiveInject(i1.ElectionService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService));\n  };\n\n  VoteScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VoteScreenComponent,\n    selectors: [[\"app-vote-screen\"]],\n    decls: 20,\n    vars: 7,\n    consts: [[3, \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"elections\"], [\"id\", \"elections\", \"name\", \"electionId\", 1, \"form-control\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [\"value\", \"\", \"selected\", \"selected\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"optionsToVote\"], [\"id\", \"optionsToVote\", \"name\", \"OptionToVoteIdNumber\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\"], [3, \"value\"]],\n    template: function VoteScreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"json\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 0, 1);\n        i0.ɵɵlistener(\"ngSubmit\", function VoteScreenComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"label\", 3);\n        i0.ɵɵtext(7, \"\\u05D1\\u05D7\\u05D9\\u05E8\\u05D5\\u05EA \\u05E4\\u05EA\\u05D5\\u05D7\\u05D5\\u05EA \\u05DC\\u05D4\\u05E6\\u05D1\\u05E2\\u05D4\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 4);\n        i0.ɵɵlistener(\"change\", function VoteScreenComponent_Template_select_change_8_listener() {\n          return ctx.getOptionsToVote();\n        })(\"ngModelChange\", function VoteScreenComponent_Template_select_ngModelChange_8_listener($event) {\n          return ctx.voterId = $event;\n        });\n        i0.ɵɵelementStart(9, \"option\", 5);\n        i0.ɵɵtext(10, \"\\u05D1\\u05D7\\u05E8 \\u05D1\\u05D7\\u05D9\\u05E8\\u05D5\\u05EA \\u05DE\\u05D4\\u05E8\\u05E9\\u05D9\\u05DE\\u05D4\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, VoteScreenComponent_option_11_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2);\n        i0.ɵɵelementStart(13, \"label\", 7);\n        i0.ɵɵtext(14, \"\\u05D0\\u05E4\\u05E9\\u05E8\\u05D5\\u05D9\\u05D5\\u05EA \\u05D4\\u05E6\\u05D1\\u05E2\\u05D4\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"select\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function VoteScreenComponent_Template_select_ngModelChange_15_listener($event) {\n          return ctx.vote.OptionToVoteIdNumber = $event;\n        });\n        i0.ɵɵelement(16, \"option\", 5);\n        i0.ɵɵtemplate(17, VoteScreenComponent_option_17_Template, 2, 2, \"option\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 9);\n        i0.ɵɵtext(19, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 5, ctx.voterId));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.voterId);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filterOpenElections());\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.vote.OptionToVoteIdNumber);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.optionsToVote);\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i5.NgForOf],\n    pipes: [i5.JsonPipe],\n    styles: [\"\"]\n  });\n  return VoteScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}